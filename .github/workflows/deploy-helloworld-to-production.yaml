# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the values for `service` and `cluster` in the workflow below with your service and cluster names.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of `task-definition` in the workflow below with your JSON file's name.
#    Replace the value of `container-name` in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.

name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

jobs:
  builddeploy:
    name: Provision ECS Cluster, Build Docker Image, and Deploy to Cluster
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build docker image
      id: build-image
      env:
        GIT_COMMIT: ${{ github.sha }}
      run: |
        npm --dockerregistry="${{ steps.login-ecr.outputs.registry }}" run docker_build
        node tools/set-docker-image-output.js ${{ steps.login-ecr.outputs.registry }} ${{ github.sha }}
        
    - name: Push docker image to Amazon ECR
      env:
        GIT_COMMIT: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        npm --dockerregistry="${{ steps.login-ecr.outputs.registry }}" run docker_push

    - name: Prepare AWS Clouformation templates
      env:
        DST_BUCKET: s3://cloudformation-modules.echeruo.net
      run: |
        node tools/resolve-tempate-urls.js infra/services/helloworld/cloudformation.yaml temp/s3/transformed.yaml temp/s3/modules ${{ env.DST_BUCKET }}
        node tools/set-params.js infra/services/helloworld/cloudformation.parameters.json temp/s3/transformed.json ContainerImage ${{ steps.build-image.outputs.image }}
        aws s3 mb ${{ env.DST_BUCKET }} || true
        cd temp/s3/modules
        aws s3 sync . ${{ env.DST_BUCKET }}

    - name: Provision ECS Cluster
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        name: HelloworldCluster
        template: temp/s3/transformed.yaml
        parameter-overrides: file://${{ github.workspace }}/temp/s3/transformed.json
        no-fail-on-empty-changeset: "1"
        capabilities: "CAPABILITY_IAM"
